{:deps {}
 :tasks {:requires ([clojure.string :as str]
                    [clojure.java.io :as io]
                    [clojure.java.shell]
                    [babashka.fs :as fs]
                    [cheshire.core :as json]
                    [clojure.pprint])
         :init (do
                 (def green "\u001B[32m")
                 (def purple "\u001B[35m")
                 (def clear-color "\u001B[0m")
                 (def bold "\033[0;1m")
                 (def bold-end "\033[22m")
                 (def green-underline "\033[32;4m")

                 (defn colored-printer [map & [ks]]
                   (doseq [[k v] (if ks (select-keys map ks) map)]
                     (println (str bold (str/capitalize (name k)) ": " bold-end (str v)))))

                 (defn sh
                   "clojure.java.shell/sh wrapper-simplifier
                    command - shell command represented as a single string"
                   [command]
                   (println "$" command)
                   (-> clojure.java.shell/sh
                       (apply (str/split command (re-pattern "\\s")))
                       :out)))
         :enter (do
                  (println (str purple  "Executing: " clear-color bold (:name (current-task)) bold-end))
                  (def task-start-ts (System/currentTimeMillis)))
         :leave (println (str green "Task: " bold  (:name (current-task)) bold-end
                              " " green-underline "finished in "
                              (- (System/currentTimeMillis) task-start-ts) " ms" clear-color \newline))
         set-zen-fhir-version {:doc "Setup zen.fhir/version regex"
                               :task (let [current-git-repo-tag (or (first *command-line-args*) (-> "git describe --tag --abbrev=0" sh str/trim-newline))
                                           semantic-version-pattern (re-pattern "(\\d+)\\.(\\d+)\\.(\\d+)(-.+)?" )
                                           [match major minor _patch _pre-release] (re-find semantic-version-pattern current-git-repo-tag)
                                           zen-fhir-regex (if (= major "0")
                                                            (format "0\\\\.%s\\\\.\\\\d+(?:-\\\\d+)?" minor)
                                                            (format "%s\\\\.\\\\d+\\\\.\\\\d+(?:-\\\\d+)?" major))]
                                       (println (str "Version: " bold match bold-end))
                                       (spit "resources/zen-fhir-version" match)
                                       (->> (-> "zrc/zen/fhir.edn.tpl"
                                                slurp
                                                (str/replace "${ZEN_FHIR_VERSION}" match)
                                                (str/replace "${ZEN_FHIR_REGEX}" zen-fhir-regex))
                                            (spit "zrc/zen/fhir.edn")))}

         init {:depends [set-zen-fhir-version]
               :task (do
                       (shell "npm --registry=https://packages.simplifier.net install")
                       (shell "npm --registry=https://packages.simplifier.net install"))}

         repl {:depends [set-zen-fhir-version]
               :task (clojure "-M:test:nrepl -m nrepl.cmdline --middleware [cider.nrepl/cider-middleware]")}

         test {:depends [set-zen-fhir-version]
               :task (clojure "-M:test:kaocha")}

         ci-test {:depends [set-zen-fhir-version init test]}

         init-r3 {:depends [set-zen-fhir-version]
                  :task (do
                          (shell {:dir "r3"} "npm --registry=https://packages.simplifier.net install")
                          (shell {:dir "r3"} "npm --registry=https://packages.simplifier.net install"))}

         build (clojure "-X:build all")

         zen-profiles (let [[node-modules zrc ver package] *command-line-args*]
                        (clojure (str "-M -m zen.fhir.tooling " node-modules " " zrc " " ver " " package)))

         build-stanadlone-projects (let [[node-modules zrc preserve-package alt-package-name] *command-line-args*
                                         opts (cond-> {}
                                                preserve-package
                                                (assoc "preserve-package" preserve-package)
                                                alt-package-name
                                                (assoc "alt-package-name" alt-package-name))]
                                     (clojure (str "-M -m zen.fhir.tooling.aidbox-standalone-v2 " node-modules " " zrc " " (str/join " " (flatten (seq opts))))))

         build-standalone-zen-profiles-all-versions
         (let [get-dependency-meta (fn [dependency] (-> (sh (str "npm --registry https://packages.simplifier.net --json view " dependency))
                                                        (json/parse-string keyword)))
               {:as top-level-deps, :keys [dependencies]} (read-string (slurp "resources/package.edn"))]
           (doseq [dependency dependencies
                   :let [{:as npm-view-obj, versions :versions dependency-name :name {latest-dep-version :latest} :dist-tags}
                         (get-dependency-meta dependency)]]
             (doseq [v versions
                     :let [dependency-meta (get-dependency-meta (str dependency "@" v))
                           dep-folder (str dependency "-" v "/")]
                     :when (= "R4" (:fhirVersion dependency-meta))]
               (try
                 (println "\nProcessing dependency...")
                 (colored-printer dependency-meta [:fhirVersion :name :version])
                 (sh (str "npm --prefix " dep-folder " --registry https://packages.simplifier.net install " (:url dependency-meta)))
                 (let [package-json-path (str/join "/" [dep-folder "node_modules" dependency-name "package.json"])
                       package-json      (slurp package-json-path)
                       package-info      (json/parse-string package-json keyword)
                       fhir-dep          (get-in package-info [:dependencies :hl7.fhir.r4.core])
                       fhir-4.0.1-core-iself?  (and (= (:name package-info) "hl7.fhir.r4.core")
                                                    (= (:version package-info) "4.0.1"))]
                   (cond
                     (and (nil? fhir-dep) (not fhir-4.0.1-core-iself?))
                     (println (str purple "WARNING:" clear-color " package doesn't contain FHIR core dependency"))

                     #_(str/starts-with? (str fhir-dep) "4")
                     (or fhir-4.0.1-core-iself? (= "4.0.1" fhir-dep)) #_"NOTE: simplifier hosts onle 4.0.1 currently"
                     (binding [*command-line-args* (list (str dep-folder "node_modules/")
                                                         "zrc/standalone_projects/"
                                                         dependency-name
                                                         (if (= v latest-dep-version) dependency (str dependency "-" v)))]
                       (run 'build-stanadlone-projects))

                     :else
                     (println (str purple "WARNING:" clear-color " package FHIR core version is not r4"))))
                 (catch Exception e
                   (println (str purple "ERROR:" clear-color " " (.getMessage e))))
                 (finally
                   (try (sh (str "rm -rf " dep-folder))
                        (catch Exception _)))))))

         build-terminology-bundles (clojure "-M -m zen.fhir.tooling.terminology")

         }}
